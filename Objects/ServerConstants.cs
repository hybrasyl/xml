// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 6.0.74.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace Hybrasyl.Xml.Objects
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Xml;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="http://www.hybrasyl.com/XML/Hybrasyl/2020-02")]
public partial class ServerConstants
{
    #region Private fields
    private float _merchantBuybackPercentage;
    private int _playerMaxLevel;
    private int _viewportSize;
    private int _playerMaxBookSize;
    private int _playerMaxDropDistance;
    private int _playerPickupDistance;
    private int _playerExchangeDistance;
    private int _playerMaximumGold;
    private int _itemVariantIdStart;
    private int _logDefaultLevels;
    private int _playerGroupSharingDistance;
    private int _playerAsyncDialogDistance;
    private int _lagMap;
    private int _nationalSpawnTimeout;
    private int _deathpileGroupTimeout;
    private int _deathpileOtherTimeout;
    private int _monsterLootDropTimeout;
    private int _monsterTaggingTimeout;
    private int _byteHeartbeatInterval;
    private int _tickHeartbeatInterval;
    private int _reapHeartbeatInterval;
    private int _playerIdleTime;
    private int _playerIdleCheck;
    private int _dialogSequenceShared;
    private int _dialogSequencePursuits;
    private int _dialogSequenceAsync;
    private int _dialogSequenceHardcoded;
    private int _boardMessageResponseSize;
    private int _boardMessageCooldown;
    private int _mailMessageCooldown;
    private int _playerMinStat;
    private int _playerMaxStat;
    private int _playerMinBaseHpMp;
    private uint _playerMaxBaseHpMp;
    private float _playerMinDmg;
    private float _playerMaxDmg;
    private float _playerMinHit;
    private float _playerMaxHit;
    private float _playerMinMr;
    private float _playerMaxMr;
    private float _playerMinAc;
    private float _playerMaxAc;
    private static XmlSerializer _serializerXml;
    #endregion
    
    public ServerConstants()
    {
        _merchantBuybackPercentage = ((float)(0.2F));
        _playerMaxLevel = 99;
        _viewportSize = 24;
        _playerMaxBookSize = 90;
        _playerMaxDropDistance = 2;
        _playerPickupDistance = 2;
        _playerExchangeDistance = 2;
        _playerMaximumGold = 1000000000;
        _itemVariantIdStart = 100000;
        _logDefaultLevels = 1;
        _playerGroupSharingDistance = 20;
        _playerAsyncDialogDistance = 10;
        _lagMap = 1001;
        _nationalSpawnTimeout = 10800;
        _deathpileGroupTimeout = 0;
        _deathpileOtherTimeout = 900;
        _monsterLootDropTimeout = 60;
        _monsterTaggingTimeout = 300;
        _byteHeartbeatInterval = 60;
        _tickHeartbeatInterval = 60;
        _reapHeartbeatInterval = 5;
        _playerIdleTime = 60;
        _playerIdleCheck = 10;
        _dialogSequenceShared = 5000;
        _dialogSequencePursuits = 5100;
        _dialogSequenceAsync = 65000;
        _dialogSequenceHardcoded = 65280;
        _boardMessageResponseSize = 64;
        _boardMessageCooldown = 60;
        _mailMessageCooldown = 60;
        _playerMinStat = 1;
        _playerMaxStat = 255;
        _playerMinBaseHpMp = 1;
        _playerMaxBaseHpMp = ((uint)(4294967295));
        _playerMinDmg = ((float)(-16F));
        _playerMaxDmg = ((float)(-16F));
        _playerMinHit = ((float)(-16F));
        _playerMaxHit = ((float)(-16F));
        _playerMinMr = ((float)(-16F));
        _playerMaxMr = ((float)(-16F));
        _playerMinAc = ((float)(-90F));
        _playerMaxAc = ((float)(100F));
    }
    
    public float MerchantBuybackPercentage
    {
        get
        {
            return _merchantBuybackPercentage;
        }
        set
        {
            _merchantBuybackPercentage = value;
        }
    }
    
    public int PlayerMaxLevel
    {
        get
        {
            return _playerMaxLevel;
        }
        set
        {
            _playerMaxLevel = value;
        }
    }
    
    public int ViewportSize
    {
        get
        {
            return _viewportSize;
        }
        set
        {
            _viewportSize = value;
        }
    }
    
    public int PlayerMaxBookSize
    {
        get
        {
            return _playerMaxBookSize;
        }
        set
        {
            _playerMaxBookSize = value;
        }
    }
    
    public int PlayerMaxDropDistance
    {
        get
        {
            return _playerMaxDropDistance;
        }
        set
        {
            _playerMaxDropDistance = value;
        }
    }
    
    public int PlayerPickupDistance
    {
        get
        {
            return _playerPickupDistance;
        }
        set
        {
            _playerPickupDistance = value;
        }
    }
    
    public int PlayerExchangeDistance
    {
        get
        {
            return _playerExchangeDistance;
        }
        set
        {
            _playerExchangeDistance = value;
        }
    }
    
    public int PlayerMaximumGold
    {
        get
        {
            return _playerMaximumGold;
        }
        set
        {
            _playerMaximumGold = value;
        }
    }
    
    public int ItemVariantIdStart
    {
        get
        {
            return _itemVariantIdStart;
        }
        set
        {
            _itemVariantIdStart = value;
        }
    }
    
    public int LogDefaultLevels
    {
        get
        {
            return _logDefaultLevels;
        }
        set
        {
            _logDefaultLevels = value;
        }
    }
    
    public int PlayerGroupSharingDistance
    {
        get
        {
            return _playerGroupSharingDistance;
        }
        set
        {
            _playerGroupSharingDistance = value;
        }
    }
    
    public int PlayerAsyncDialogDistance
    {
        get
        {
            return _playerAsyncDialogDistance;
        }
        set
        {
            _playerAsyncDialogDistance = value;
        }
    }
    
    public int LagMap
    {
        get
        {
            return _lagMap;
        }
        set
        {
            _lagMap = value;
        }
    }
    
    public int NationalSpawnTimeout
    {
        get
        {
            return _nationalSpawnTimeout;
        }
        set
        {
            _nationalSpawnTimeout = value;
        }
    }
    
    public int DeathpileGroupTimeout
    {
        get
        {
            return _deathpileGroupTimeout;
        }
        set
        {
            _deathpileGroupTimeout = value;
        }
    }
    
    public int DeathpileOtherTimeout
    {
        get
        {
            return _deathpileOtherTimeout;
        }
        set
        {
            _deathpileOtherTimeout = value;
        }
    }
    
    public int MonsterLootDropTimeout
    {
        get
        {
            return _monsterLootDropTimeout;
        }
        set
        {
            _monsterLootDropTimeout = value;
        }
    }
    
    public int MonsterTaggingTimeout
    {
        get
        {
            return _monsterTaggingTimeout;
        }
        set
        {
            _monsterTaggingTimeout = value;
        }
    }
    
    public int ByteHeartbeatInterval
    {
        get
        {
            return _byteHeartbeatInterval;
        }
        set
        {
            _byteHeartbeatInterval = value;
        }
    }
    
    public int TickHeartbeatInterval
    {
        get
        {
            return _tickHeartbeatInterval;
        }
        set
        {
            _tickHeartbeatInterval = value;
        }
    }
    
    public int ReapHeartbeatInterval
    {
        get
        {
            return _reapHeartbeatInterval;
        }
        set
        {
            _reapHeartbeatInterval = value;
        }
    }
    
    public int PlayerIdleTime
    {
        get
        {
            return _playerIdleTime;
        }
        set
        {
            _playerIdleTime = value;
        }
    }
    
    public int PlayerIdleCheck
    {
        get
        {
            return _playerIdleCheck;
        }
        set
        {
            _playerIdleCheck = value;
        }
    }
    
    public int DialogSequenceShared
    {
        get
        {
            return _dialogSequenceShared;
        }
        set
        {
            _dialogSequenceShared = value;
        }
    }
    
    public int DialogSequencePursuits
    {
        get
        {
            return _dialogSequencePursuits;
        }
        set
        {
            _dialogSequencePursuits = value;
        }
    }
    
    public int DialogSequenceAsync
    {
        get
        {
            return _dialogSequenceAsync;
        }
        set
        {
            _dialogSequenceAsync = value;
        }
    }
    
    public int DialogSequenceHardcoded
    {
        get
        {
            return _dialogSequenceHardcoded;
        }
        set
        {
            _dialogSequenceHardcoded = value;
        }
    }
    
    public int BoardMessageResponseSize
    {
        get
        {
            return _boardMessageResponseSize;
        }
        set
        {
            _boardMessageResponseSize = value;
        }
    }
    
    public int BoardMessageCooldown
    {
        get
        {
            return _boardMessageCooldown;
        }
        set
        {
            _boardMessageCooldown = value;
        }
    }
    
    public int MailMessageCooldown
    {
        get
        {
            return _mailMessageCooldown;
        }
        set
        {
            _mailMessageCooldown = value;
        }
    }
    
    public int PlayerMinStat
    {
        get
        {
            return _playerMinStat;
        }
        set
        {
            _playerMinStat = value;
        }
    }
    
    public int PlayerMaxStat
    {
        get
        {
            return _playerMaxStat;
        }
        set
        {
            _playerMaxStat = value;
        }
    }
    
    public int PlayerMinBaseHpMp
    {
        get
        {
            return _playerMinBaseHpMp;
        }
        set
        {
            _playerMinBaseHpMp = value;
        }
    }
    
    public uint PlayerMaxBaseHpMp
    {
        get
        {
            return _playerMaxBaseHpMp;
        }
        set
        {
            _playerMaxBaseHpMp = value;
        }
    }
    
    public float PlayerMinDmg
    {
        get
        {
            return _playerMinDmg;
        }
        set
        {
            _playerMinDmg = value;
        }
    }
    
    public float PlayerMaxDmg
    {
        get
        {
            return _playerMaxDmg;
        }
        set
        {
            _playerMaxDmg = value;
        }
    }
    
    public float PlayerMinHit
    {
        get
        {
            return _playerMinHit;
        }
        set
        {
            _playerMinHit = value;
        }
    }
    
    public float PlayerMaxHit
    {
        get
        {
            return _playerMaxHit;
        }
        set
        {
            _playerMaxHit = value;
        }
    }
    
    public float PlayerMinMr
    {
        get
        {
            return _playerMinMr;
        }
        set
        {
            _playerMinMr = value;
        }
    }
    
    public float PlayerMaxMr
    {
        get
        {
            return _playerMaxMr;
        }
        set
        {
            _playerMaxMr = value;
        }
    }
    
    public float PlayerMinAc
    {
        get
        {
            return _playerMinAc;
        }
        set
        {
            _playerMinAc = value;
        }
    }
    
    public float PlayerMaxAc
    {
        get
        {
            return _playerMaxAc;
        }
        set
        {
            _playerMaxAc = value;
        }
    }
    
    private static XmlSerializer SerializerXml
    {
        get
        {
            if ((_serializerXml == null))
            {
                _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(ServerConstants));
            }
            return _serializerXml;
        }
    }
    
    #region Serialize/Deserialize
    /// <summary>
    /// Serialize ServerConstants object
    /// </summary>
    /// <returns>XML value</returns>
    public virtual string Serialize()
    {
        StreamReader streamReader = null;
        MemoryStream memoryStream = null;
        try
        {
            memoryStream = new MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            xmlWriterSettings.Indent = true;
            xmlWriterSettings.IndentChars = "  ";
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            SerializerXml.Serialize(xmlWriter, this);
            memoryStream.Seek(0, SeekOrigin.Begin);
            streamReader = new StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes ServerConstants object
    /// </summary>
    /// <param name="input">string to deserialize</param>
    /// <param name="obj">Output ServerConstants object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out ServerConstants obj, out Exception exception)
    {
        exception = null;
        obj = default(ServerConstants);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool Deserialize(string input, out ServerConstants obj)
    {
        Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }
    
    public static ServerConstants Deserialize(string input)
    {
        StringReader stringReader = null;
        try
        {
            stringReader = new StringReader(input);
            return ((ServerConstants)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }
    
    public static ServerConstants Deserialize(Stream s)
    {
        return ((ServerConstants)(SerializerXml.Deserialize(s)));
    }
    #endregion
    
    /// <summary>
    /// Serializes current ServerConstants object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, out Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName);
            return true;
        }
        catch (Exception e)
        {
            exception = e;
            return false;
        }
    }
    
    public virtual void SaveToFile(string fileName)
    {
        StreamWriter streamWriter = null;
        try
        {
            string dataString = Serialize();
            FileInfo outputFile = new FileInfo(fileName);
            streamWriter = outputFile.CreateText();
            streamWriter.WriteLine(dataString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes xml markup from file into an ServerConstants object
    /// </summary>
    /// <param name="fileName">File to load and deserialize</param>
    /// <param name="obj">Output ServerConstants object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, out ServerConstants obj, out Exception exception)
    {
        exception = null;
        obj = default(ServerConstants);
        try
        {
            obj = LoadFromFile(fileName);
            return true;
        }
        catch (Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool LoadFromFile(string fileName, out ServerConstants obj)
    {
        Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }
    
    public static ServerConstants LoadFromFile(string fileName)
    {
        FileStream file = null;
        StreamReader sr = null;
        try
        {
            file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new StreamReader(file);
            string dataString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(dataString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
}
}
#pragma warning restore
